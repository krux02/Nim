The goal of this compiler fork is to create a refactored bare bones
version of Nim where I can can respond faster to bug
reports. Deprecated features won't stay for long. The goal is to
remove all WTFs from the codebase.

* tools
** make sure testament works from any directory
** make sure testament run tmytest.nim works for any test
** testament run test/does/not/exist is a warning not an error
** nimi for included nim files
** validate links in nimdoc automatically
** log time for every test persistently
** [#B] make every test runable with ~testament run file.nim~ from any directory
** testament
*** new action ~check~ for testatment
*** support for multiple error messages to check for

* documentation
** document how magics work for contributors
** document all special operators and how they are called
** explain pragma explain
** add entry to tutorial about init pattern (inheritable types should provide init and newMyType)
** Tutorial, Nim for C++ Developers: class type member -> template with typedesc argument
** document cast behavior for different sized integers in the spec
** default pattern for module test
** document very well differences to mainline Nim
** document workflow
*** emacs
**** *compile* mode for tests, for files
**** jump to definition and back (with etags)
** revisit codeowners.rst


* linting / warnings / errors
** error about deprecation that doesn't mention a fallback solution.
** warning in template declaration to prefer ~untyped~ over ~typed~.
** new statement: ~includedFrom "foo.nim"~ ~template includedFrom(x: string) = discard~
** forbid defining magic procs in user code.
** getImpl warning when it is not used on proc template macro symbols.

* library
** implement unreachable (assert false, "this section should be unreachable")
** "range types need to be constructed with '..', '..<' is not supported"
** allow cast to pointer of all proc/callback/closure types
** invert `cmp` and `<` dependency
** reintroduce ~abort~
** Generic ~==~ for Object Variants
** move cint, cfloat, cstring to ctypes.nim ("compatible string" WTF!?)
** easy source file relative paths
** full c lib wrapper (maybe not)
** provide ~getTypeInstSkipAlias~ as substitution of ~typetraits.genericParams~
** move/create jsNumber, jsString, jsObject to jstypes.nim

* fixes
** DONE use nnkTupleConstr consistently (replace nnkPar where necessary)
** DONE make sure, ~typed~ doesn't mean ~void~ in macro/templates anymore.
** DONE error on compile time var at runtime
** DONE inconsistency, getType: (BracketExpr (Sym "ref") ...) vs. getTypeInst  (RefTy ...)  (deprecated getType)
** DONE generic typedesc T should not be visible anymore in the getImpl of generic instantiations.
** raise error on union usage at compile time
** fix how varargs work
** do something about generic parameters for macro declarations. They are a bit weird.
** fix parser to read negative literals
** move documentation comments to identifier/symbol properties
** Refactor nkPostfix export marker and backticks around identifiers into flags on identifiers.
** fix literals of type ~int~
** support ~toOpenArray~ in the VM
** fix crash on ~seq[MySimdType]~ (aligned allocation)
** fix ~proc len*[TOpenArray: openArray|varargs](x: TOpenArray): int~ (WTF)
** fix how newNimNode/newTree sets line information
** allow conversion of ~seq[byte](mystring)~ and ~string(mySeqofBytes)~.
** allow assigning the key/kind field of variant objects again.

* feature stripping
** DONE remove manyloc tests
** DONE remove pragma noforward
** DONE get rid of the weird `..Seq` type definitions
** DONE getRid of TProcCon.selfSym
** DONE remove special operators ~.~ ~.=~ ~.()~
** DONE require argument types for macros and templates (not in the parser, that is a bad idea)
** DONE remove ~this~ pragma
** DONE remove ~using~ statement
** DONE remove experimental code reordering
** DONE remove the ~Any~ type
** DONE deprecate ByteAddress
** DONE remove immediate/macros templates
** DONE remove MyType.field access
** DONE remove ~ast~ based function overloading
** DONE remove term rewriting macros
** enforce () for proc template definitions
** remove any knowlege about nimble from the compiler
** remove language feature "bind many"
** deprecate ~pro new[T](var T): void~
** restrict usage of typedesc https://github.com/nim-lang/Nim/pull/11959
** require full path names in ~nim c myfile.nim~
** deprecate ~runnableExamples~ in favor of doc comments with examples.

* refactoring
** DONE remove all traces on ~nOrig~
** DONE make PNode.sons private for better mutability control.
** change ~enforceVoidContext~ to ~tyVoid~
** rename down cast / up cast
** normalize the magic syntax to a single syntax (identifier no strings)
** inject base type fields into node (make iterating fields easier).
** move unsigned (%) operators to unsigned module.
** consistent argument names in stdlib functions
** allow builtins to be macros (suits semantics better)
** refactor unittests module to not use local templates anymore

* fix for my own breakages
** reenabled niminaction tests and js tests
** ~typed~ should not mean: template/macro must generate a value
** getTypeInst, getTypeImpl fix needs a better/compatible solution.
** forwarding templates should not create line info.

* etc
** wtf is up with ~cast[type(foo.bar)](expr)~? Why does it still work even after ~type~ is removed from ~system.nim~
  semTypeNode returns only a PType, it should return a PNode.

* more thinking required
** forbid/warn overload ~foobar(arg: untyped)~ ~foobar(arg: int)~
** ensure automatically that all compilation branches js C C++ define the same set of symbols
** WTF is ~type Foo[T: static typedesc] = object~ supposed to mean?
** check what happens with default values for typed/untyped arguments for macros
